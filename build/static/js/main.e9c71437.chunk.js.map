{"version":3,"sources":["serviceWorker.js","status.js","fileTrans.js","index.js","logo.svg"],"names":["Boolean","window","location","hostname","match","fileStatus","FileTrans","props","state","files","status","fileToUpload","addFile","bind","uploadAll","uploadOne","pauseOrContinue","cancel","divideAndUploadSlice","uploadFinish","render","event","f","target","tmp","this","tmpStatus","i","length","push","Status","percentage","setState","value","_this","Promise","resolve","all","map","setTimeout","file","index","setFileError","tmpFileStatus","setFileSucc","setFileStatus","reader","FileReader","onload","worker","Worker","onmessage","e","data","err","hash","console","log","hashEncoded","encodeURIComponent","fetch","url","Math","ceil","size","then","res","json","needUpload","needUploadIndex","catch","postMessage","result","readAsArrayBuffer","reject","hasError","formdata","FormData","append","name","postData","fileSlices","cur","uploadedSliceNum","curSlice","slice","indexOf","toFixed","info","errorControl","success","Object","keys","forEach","key","contentType","method","body","headers","compStatus","uploadBtnEnable","pauseBtnEnable","buttonStyle","display","id","title","type","onChange","multiple","maxLength","style","onClick","undefined","barEnable","className","width","backgroundColor","Component","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message","module","exports"],"mappings":"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","file":"static/js/main.e9c71437.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","export const PAUSING = 'pausing';\r\nexport const UPLOADING = 'uploading';\r\nexport const ERROR = 'error';\r\nexport const INIT = 'init';\r\nexport const SUCCESS = 'success';\r\nexport const fileStatus = {\r\n    UPLOADING: 'file_uploading',\r\n    ERROR: 'file_error',\r\n    BEFORE_UPLOAD: 'file_before_upload',\r\n    HASHING: 'file_hashing',\r\n    SUCCESS: 'file_success',\r\n}","import React,{Component} from 'react';\r\nimport * as Status from './status';\r\nimport './fileTrans.css';\r\n\r\nconst SliceSize = 1024*1024;\r\n\r\nclass FileTrans extends Component{\r\n    constructor(props){\r\n        super();\r\n        this.state = {\r\n            files:[],\r\n            status:Status.INIT,\r\n            fileStatus:[],\r\n            fileToUpload: 0,\r\n        }\r\n        this.addFile = this.addFile.bind(this);\r\n        this.uploadAll = this.uploadAll.bind(this);\r\n        this.uploadOne = this.uploadOne.bind(this);\r\n        this.pauseOrContinue = this.pauseOrContinue.bind(this);\r\n        this.cancel = this.cancel.bind(this);\r\n        this.divideAndUploadSlice = this.divideAndUploadSlice.bind(this);\r\n        this.uploadFinish = this.uploadFinish.bind(this);\r\n        this.render = this.render.bind(this);\r\n    }\r\n\r\n    //监听input的change事件，添加文件时加入state.files\r\n    addFile(event){\r\n        const f = event.target.files;\r\n        let tmp = [...this.state.files];\r\n        let tmpStatus = [...this.state.fileStatus];\r\n        \r\n        for(let i = 0;i < f.length;++i){\r\n            tmp.push(f[i]);\r\n            tmpStatus.push({status:Status.fileStatus.BEFORE_UPLOAD,percentage:0});\r\n        }\r\n        this.setState({\r\n            ...this.state,\r\n            files:[...tmp],\r\n            fileStatus:[...tmpStatus],\r\n            fileToUpload:this.state.fileToUpload+tmp.length,\r\n        })\r\n        event.target.value = '';    //clear input so that change event will be caught when choose two same files\r\n    }\r\n    \r\n    //上传文件，state.status状态置为uploading，\r\n    //用promise.all等待所有文件上传完成后输出成功/失败信息\r\n    async uploadAll(){\r\n        const _this = this;\r\n        await new Promise((resolve)=>{\r\n            this.setState({...this.state,status:Status.UPLOADING},()=>{\r\n                resolve();\r\n            });\r\n        })\r\n\r\n        await Promise.all(_this.state.files.map((f,i)=>{\r\n            return _this.uploadOne(f,i);\r\n        }));\r\n        if(this.state.fileToUpload>0){\r\n            if(this.state.status==Status.PAUSING){\r\n                return;\r\n            }\r\n            this.setState({...this.state,status:Status.ERROR});\r\n        }\r\n        else{\r\n            this.setState({...this.state,status:Status.SUCCESS,files:[],fileStatus:[]});\r\n            setTimeout(()=>{\r\n                _this.setState({..._this.state,status:Status.INIT});\r\n            },3000);\r\n        }\r\n    }\r\n\r\n    //负责上传文件列表中的一个文件，返回promise\r\n    uploadOne(file,index){\r\n        const _this = this;\r\n        \r\n        return new Promise((resolve)=>{\r\n            const url = '/upload';\r\n            //上传失败\r\n            var setFileError = ()=>{\r\n                let tmpFileStatus = [..._this.state.fileStatus];\r\n                tmpFileStatus[index].status = Status.fileStatus.ERROR;\r\n                _this.setState({..._this.state,fileStatus:[...tmpFileStatus]},()=>{resolve('err');});\r\n                \r\n            }\r\n            //上传成功\r\n            var setFileSucc = ()=>{\r\n                let tmpFileStatus = [..._this.state.fileStatus];\r\n                tmpFileStatus[index].status = Status.fileStatus.SUCCESS;\r\n                _this.setState({..._this.state,fileStatus:[...tmpFileStatus],fileToUpload:_this.state.fileToUpload-1},()=>{resolve('ok');});\r\n            }\r\n            //改变文件状态     \r\n            var setFileStatus = (status)=>{\r\n                let tmpFileStatus = [..._this.state.fileStatus];\r\n                tmpFileStatus[index].status = status;\r\n                _this.setState({..._this.state,fileStatus:[...tmpFileStatus]});\r\n            }\r\n\r\n            //filereader的onload函数，完成readfile后进行hash和上传\r\n            const onload = function(event){    \r\n                //用专用webworker做hash工作\r\n                const worker = new Worker('/hash.js');\r\n                //worker hash完成后返回数据，进行上传\r\n                worker.onmessage = (e)=>{\r\n                    if(e.data.err||!e.data.hash){\r\n                        console.log(e.data.err||'Worker data error');\r\n                        setFileError();\r\n                        return;\r\n                    }\r\n                    setFileStatus(Status.fileStatus.UPLOADING);\r\n                    const hash = e.data.hash;\r\n                    const hashEncoded = encodeURIComponent(hash);\r\n                    //send hash and test if there is such a file on server\r\n                    fetch(url+'?hash='+hashEncoded+'&sliceNum='+Math.ceil(file.size/SliceSize)).then((res)=>{\r\n                        res.json().then((data)=>{\r\n                            if(data.needUpload){\r\n                                _this.divideAndUploadSlice(file,hash,index,data.needUploadIndex).then((data)=>{\r\n                                    if(data){\r\n                                        if(data=='pause'){\r\n                                            resolve('pause');\r\n                                        }\r\n                                        else{\r\n                                            setFileSucc();\r\n                                        }\r\n                                    }\r\n                                },(err)=>{\r\n                                    if(err){\r\n                                        setFileError();\r\n                                    }\r\n                                }).catch((err)=>{\r\n                                    if(err){\r\n                                       setFileError();\r\n                                    }\r\n                                });\r\n                            }else{\r\n                                setFileSucc();\r\n                            }\r\n                        }).catch((err)=>{\r\n                            console.log(err);\r\n                            setFileError();\r\n                        })\r\n                    }).catch((err)=>{\r\n                        console.log(err);\r\n                        setFileError();\r\n                    });\r\n                };\r\n                //向worker发送数据\r\n                worker.postMessage({\r\n                    file:event.target.result\r\n                });\r\n            }\r\n            setFileStatus(Status.fileStatus.HASHING);\r\n            //create filereader\r\n            let reader = new FileReader();\r\n            reader.onload = onload;\r\n            reader.readAsArrayBuffer(file);\r\n        })\r\n        \r\n    }\r\n\r\n    //负责将大文件切片和上传，返回promise\r\n    divideAndUploadSlice(file,hash,index,needUploadIndex){\r\n        const _this = this;\r\n        return new Promise((resolve,reject)=>{\r\n            let hasError = false;  //有出错的标志\r\n            if(file.size<SliceSize){    //文件小于分块大小，直接上传\r\n                let formdata = new FormData();\r\n                if(hash){\r\n                    formdata.append('hash',hash);\r\n                }\r\n                formdata.append('name',file.name);\r\n                formdata.append('file',file);\r\n                const _this = this;\r\n                this.postData(formdata,'/upload','multipart/form-data').then((res)=>{\r\n                    if(res.status!=200){\r\n                        reject(res.status);\r\n                    }\r\n                    else{\r\n                        resolve('ok');\r\n                    }\r\n                    \r\n                }).catch((err)=>{\r\n                    if(err){\r\n                        reject(err);\r\n                    }\r\n                });\r\n            }\r\n            else{\r\n                let fileSlices = [];\r\n                let cur = 0;\r\n                let uploadedSliceNum = 0;\r\n                const _this = this;\r\n                //分块\r\n                while(cur<file.size){\r\n                    const curSlice = file.slice(cur,cur+SliceSize);\r\n                    cur += SliceSize;\r\n                    fileSlices.push(curSlice);\r\n                }\r\n                for(let i = 0;i < fileSlices.length;++i){\r\n                    if(_this.state.status==Status.PAUSING){\r\n                        resolve('pause');\r\n                        break;\r\n                    }\r\n                    if(needUploadIndex&&needUploadIndex.indexOf(i)==-1){\r\n                        continue;\r\n                    }\r\n                    const formdata = new FormData();\r\n                    formdata.append('hash',hash);\r\n                    formdata.append('index',i);\r\n                    formdata.append('name',file.name);\r\n                    formdata.append('file',fileSlices[i]);\r\n                    this.postData(formdata,'/upload','multipart/form-data').then((res)=>{\r\n                        if(res.status!=200){\r\n                            hasError = true;\r\n                        }\r\n                        uploadedSliceNum++; //所有切片都收到了回复\r\n                        if(uploadedSliceNum==fileSlices.length||(needUploadIndex&&uploadedSliceNum==needUploadIndex.length)){\r\n                            if(hasError){\r\n                                reject('upload error');\r\n                            }\r\n                            else{   //没有出错的切片，请求合并切片\r\n                                _this.uploadFinish({hash,name:file.name},()=>{reject('err')},()=>{resolve('ok')});\r\n                            }\r\n                        }\r\n\r\n                        //计算上传百分比\r\n                        let tmpFileStatus = [..._this.state.fileStatus];\r\n                        if(!needUploadIndex){\r\n                            tmpFileStatus[index].percentage = (uploadedSliceNum/fileSlices.length*100).toFixed(2);\r\n                        }\r\n                        else{\r\n                            tmpFileStatus[index].percentage = (uploadedSliceNum/needUploadIndex.length*100).toFixed(2)\r\n                        }\r\n                        _this.setState({..._this.state,fileStatus:[...tmpFileStatus]});\r\n\r\n                    }).catch((err)=>{\r\n                        if(err){\r\n                            hasError = true;\r\n                        }\r\n                    });\r\n                }\r\n            }\r\n        }\r\n        )\r\n    }    \r\n        \r\n    //切片上传完成，负责发送合并切片的请求和接收回复\r\n    uploadFinish(info,errorControl,success){\r\n        const formdata = new FormData();\r\n        formdata.append('finish',true);\r\n        const _this = this;\r\n        Object.keys(info).forEach((key)=>{\r\n            formdata.append(key,info[key]);\r\n        });\r\n        this.postData(formdata,'/upload','multipart/form-data').then((res)=>{\r\n            if(res.status!=200){\r\n                errorControl();\r\n                return;\r\n            }\r\n            success();\r\n        }).catch((err)=>{\r\n            if(err){\r\n                errorControl();\r\n            }\r\n        });\r\n    }\r\n\r\n    //fetch发送数据的封装\r\n    postData(data,url,contentType){\r\n        if(contentType=='multipart/form-data'){\r\n            return fetch(url,{\r\n                method:'POST',\r\n                body:data,\r\n            });\r\n        }\r\n        return fetch(url,{\r\n                method:'POST',\r\n                body:data,\r\n                headers:{\r\n                    contentType,\r\n                }\r\n            });\r\n    }    \r\n\r\n    //暂停或继续\r\n    pauseOrContinue(){\r\n        if(this.state.status==Status.UPLOADING){\r\n            this.setState({...this.state,status:Status.PAUSING});\r\n            return;\r\n        }\r\n        if(this.state.status==Status.PAUSING){\r\n            this.uploadAll();\r\n        }\r\n    }\r\n\r\n    //取消上传，并清除所有文件\r\n    cancel(){\r\n        this.setState({...this.state,status:Status.PAUSING});\r\n        const _this = this;\r\n        setTimeout(()=>{\r\n            _this.setState({files:[],status:Status.INIT,fileStatus:[],fileToUpload:0});\r\n        },0);\r\n    }\r\n\r\n    render(){\r\n        const compStatus = this.state.status;\r\n        const uploadBtnEnable = !(compStatus==Status.PAUSING||compStatus==Status.UPLOADING);\r\n        const pauseBtnEnable = (compStatus==Status.UPLOADING||compStatus==Status.PAUSING);\r\n\r\n        const buttonStyle = {display:(this.state.files.length>0)?'inline-block':'none'};\r\n        \r\n        return (\r\n            <div id='container'>\r\n                <a>\r\n                    <input title=\"choose file\" type=\"file\" onChange={this.addFile} multiple maxLength=\"9\"></input>\r\n                    choose file\r\n                </a>\r\n                <br></br>\r\n                <button id='upload-btn' style={buttonStyle} onClick={(uploadBtnEnable)?this.uploadAll:undefined}>{(compStatus==Status.ERROR)?'retry':'upload'}</button>\r\n                <button id='pause-btn' style={buttonStyle} onClick={(pauseBtnEnable)?this.pauseOrContinue:undefined}>{(compStatus==Status.PAUSING)?'continue':'pause'}</button>\r\n                <button id='cancel-btn' style={buttonStyle} onClick={this.cancel}>cancel</button>\r\n                <br></br>\r\n                <ul>\r\n                    {this.state.files.map((file,index)=>{\r\n                        const status = this.state.fileStatus[index].status;\r\n                        const barEnable = (status==Status.fileStatus.ERROR||status==Status.fileStatus.UPLOADING);\r\n                        return (\r\n                        <li className=\"fileList\" key={index}>\r\n                            <p title={file.name}>{file.name}</p>\r\n                            <div className=\"processing\" style={({display:(status==Status.fileStatus.HASHING)?\"inline-block\":'none'})}></div>\r\n                            <div className=\"bar\" style={({display:(barEnable)?'inline-block':'none'})}>\r\n                                <div className=\"bar-inner\" style={({width:(this.state.fileStatus[index].percentage||0)+'%',\r\n                                                                    backgroundColor:(status==Status.fileStatus.ERROR)?'red':'green'})}>\r\n                                </div>\r\n                            </div>\r\n                            <p id='file-finish-p' style={({display:(status==Status.fileStatus.SUCCESS)?\"inline-block\":'none'})}>finish</p>\r\n                            <p id='file-error-p' style={({display:(status==Status.fileStatus.ERROR)?\"inline-block\":'none'})}>ERROR</p>\r\n                        </li>);\r\n                    })}\r\n                </ul>\r\n                <p id=\"error-p\" title=\"Something is wrong, please retry.\" style={({display:(this.state.status==Status.ERROR)?\"inline-block\":'none'})}>Something is wrong, please retry.</p>\r\n                <p id=\"finish-p\" style={({display:(this.state.status==Status.SUCCESS)?\"inline-block\":'none'})}>Upload finish</p>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default FileTrans;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport FileTrans from './fileTrans';\r\n\r\nReactDOM.render(\r\n  <FileTrans></FileTrans>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}